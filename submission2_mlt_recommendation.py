# -*- coding: utf-8 -*-
"""Submission2 MLT-Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gq5Ung9b-8rC-QmPsNoOWwtiTnvNISDD

**Import library yang digunakan**
"""

# Commented out IPython magic to ensure Python compatibility.
#import library yang akan digunakan
import pandas as pd
import seaborn as sns
import os
# %matplotlib inline
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer, TfidfVectorizer
from sklearn import svm
from sklearn.metrics import classification_report
import numpy as np
import tensorflow as tf

from tensorflow import feature_column
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split

#ambil API KAGGLE
os.environ['KAGGLE_USERNAME'] = "johanesandre"
os.environ['KAGGLE_KEY'] = "a54c201c45be4ec682e929488efb0ba3"

"""**Download Dataset dari Kaggle**"""

#Download Dataset Kaggle
!kaggle datasets download -d swarnimrai/webtoon-comics-dataset/

"""**Persiapan Import Data ke Lembar Kerja**"""

# melakukan ekstraksi pada file zip
import zipfile,os
local_zip = '/content/webtoon-comics-dataset.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

"""**Persiapan Import Data ke Lembar Kerja**"""

#membaca Data CSV dan melihat 5 data teratas
df = pd.read_csv('/tmp/Webtoon Dataset.csv')
df.head()

# Mengecek total baris dan kolom dari dataset
df.shape

"""**Buat Fungsi untuk menghilangkan tanda baca di kolom summary. Tujuannya untuk mendapatkan pendekatan judul yang lebih baik**"""

#buat fungsi untuk menghilangkan tanda baca pada kolom summary
import string
def remove_punctuation(text):
    punctuationfree = "".join([i for i in text if i not in string.punctuation])
    return punctuationfree

"""**Terapkan fungsi remove_punctuation untuk kolom summary, simpan hasil baru pada kolom clean_summary**"""

#Bersihkan target kolom clean summary
df['Clean_Summary'] = df['Summary'].apply(lambda x:remove_punctuation(x))
df.head()

"""**Cek Deskripsi Tiap Kolomnya**"""

# Memuat deskripsi setiap kolom dataframe
df.describe

# Memuat informasi dataframe
df.info()

"""***Persiapan Tahap Data Processing, Recheck kembali kolom yang akan dikelola. Tampilkan 5 data teratas***"""

#Tampilkan data 5 teratas di setiap variabel
columns = ["Name", "Writer", "Genre", "Update", "Clean_Summary"]
df[columns].head()

"""***Cek Data set yang digunakan, terutama pada kolom clean_summary***"""

#Cek apa semua data ada yang kosong tidak
df[columns].isnull().sum()

"""**Buat fungsi similarity dan persiapkan variabel similarity untuk diisi, kolom ini nanti akan digunakan untuk proses Countvector**"""

#buat fungsi ambil data yang mirip. Data yang ditampung merupakan Nama, penulis, Genre, dan update
def get_similar(data):
  similar = []
  for i in range(0, data.shape[0]):
    similar.append(str(data['Name'][i]) + ' '+ str(data['Writer'][i]) + ' '+ str(data['Genre'][i]) + ' '+ str(data['Update'][i]))

  return similar

#tampilkan data dengan fungsi similarity yang dibuat tadi
df['similar'] = get_similar(df)
df.head(3)

"""**Pada Kolom similar yang didapat tadi, lakukan fungsi CountVectorizer dengan lib sklearn. Fungsi ini digunakan mengonversi dokument teks menjadi matriks dalam jumlah token**"""

#ubah kolom similar column menjadi tipe datavector
cm = CountVectorizer().fit_transform(df['similar'])

"""**Lakukan Cosine Similarity Dengan Lib sklearn, Proses ini digunakan untuk menghitung kesamaan antara dua buah objek yang dinyatakan dalam dua buah vector**"""

#Dapatkan nilai similarity/kemiripan matrix dengan fungsi Cosine similarity

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

cs = cosine_similarity(cm)
print(cs)

"""**Cek Total Baris & Kolom hasil cosine similarity**"""

# Mengecek total baris dan kolom dari hasil cosine similarity
cs.shape

"""**Lakukan Uji Coba Pada Model yang telah dibuat. Ambil satu judul yang ada di dalam dataset**

**Pada uji Coba ini kita melakukan 2 Judul Webtoon. Variable title untuk Testcase 1 dan title2 untuk testcast 2**
"""

#Uji coba dengan salah satu judul yang ada di dataset
title = 'About Death'
title2 = 'Delusion'
comic_id = df[df.Name == title]['id'].values[0]
comic_id2= df[df.Name == title2]['id'].values[0]

"""**Lakukan Enumerate dengan fungsi bawaan lib python.  Tujuannya untuk mengembalikan objek iterable (indeks dan itemnya) bersamaan.**"""

#Cari enumerasi matrix kesamaan pada judul
scores = list(enumerate(cs[comic_id]))
scores2 = list(enumerate(cs[comic_id2]))
#print (scores)

"""**Dari hasil yang didapatkan, skor di sortir berdasarkan Descending dengan fungsi bawaan python. Angka tertinggi menunjukan kemiripan dengan data test yang dimaksud**"""

#Sortir rekomendasi dari yang paling tinggi ke paling rendah
sorted_scores = sorted(scores, key=lambda x:x[1], reverse=True)
sorted_scores = sorted_scores[1:]

sorted_scores2 = sorted(scores2, key=lambda x:x[1], reverse=True)
sorted_scores2 = sorted_scores2[1:]
#print(sorted_scores[:10])

"""**Tampilkan Hasil Rekomendasi yang didapatkan. Hasil Rekomendasi merupakan Top 10 Data yang skor paling tinggi**"""

#Tampilkan hasil rekomendasi untuk pembaca
i = 0
y= 0
print("***TESTCASE 1*** ")
print("Karena anda menyukai webtoon ", title , " mungkin kamu juga menyukai ini:")
for item in sorted_scores:
  comic_name = df[df.id == item[0]]['Name'].values[0]
  print(i+1,comic_name)
  i = i + 1
  if i > 9:
    break

print("\n")
print("***TESTCASE 2***")
#Tampilkan hasil rekomendasi untuk pembaca
print("Karena anda menyukai webtoon ", title2 , " mungkin kamu juga menyukai ini:")
for item in sorted_scores2:
  comic_name = df[df.id == item[0]]['Name'].values[0]
  print(y+1,comic_name)
  y = y + 1
  if y > 9:
    break